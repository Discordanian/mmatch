$(function () {
  //  Set up Globabl Vairables
  var MAX_IMAGES = 28;    //  Number of Images to pull from in the images folder
  var frames = [];
  var images = [];
  var img = 0;
  var frm = 0;
  var timer;
  var fade_length = 2500;
  var grid_style;
  var border_color = '#fff';
  var is_mobile;

  function testMobile(){
    return ($(window).width() < 769);
  }

  //  Main init function for this page
  function init(){
    is_mobile = testMobile();

    //  Build the Grid CSS and append it to the head
    $('head').append('<style type="text/css" id="zww_grid_style"></style>');
    grid_style = $('#zww_grid_style');

    //  Build array of image Objects
    for(var x=1; x<=MAX_IMAGES; x++){

      var num = "" + x;
      while (num.length < 3) {    //  Set leading Zeros
        num = "0" + num;
      }

      images.push( {
        "rnd": 0,
        "img":"url(img/OrgPhoto_"+num+".jpg)"
      } );

    }
    shuffle(images);

    //  Set up initial Frames;
    updateFrameCount();

    $(window).on( 'resize', updateFrameCount );

    //Start the Random Image Swap Cycle
    timer = setInterval(function(){ setRandomInterval(); }, fade_length-1500);

  }

  // Shuffle an array of objects on its "rnd" property
  function shuffle($arr) {

      for(var i=0; i<$arr.length; i++){
        $arr[i].rnd = Math.random();
      }

      $arr.sort(shuffleSorter);

  }

  // Shuffle an array of objects on its "rnd" property
  function shuffleSorter(a, b) {

      var x = a.rnd;
      var y = b.rnd;

      return ((x < y) ? -1 : ((x > y) ? 1 : 0));

  }

  //  Function to properly set up an image and cylce to the next "image" card
  function setImage($card){

    $card.css("background", images[img].img)
      .css("background-size", 'cover')
      .css("background-repeat", 'no-repeat')
      .css("background-position:", 'center');

    if( ++img >= images.length ){
      //  shuffle(images);  //  If we don't shuffle images here we can insure we never have the same image next to itself.
      img = 0;
    }

  }

  //  Takes a Frame and fades out its old image to then fade in a new one.
  function swapImage(frame){

    //  Transfer background image on top layer to main layer
    frame.prev('.bottom_layer').attr('style', frame.attr('style') );

    frame.fadeOut( 0, function() {
      setImage(frame);
      frame.fadeIn( fade_length );
    });

  }

  //  Clears old interval then sets a new one to go in 0 to 2 seconds after last one completes.
  function setRandomInterval(){

    swapImage(frames[frm].frame);
    if( ++frm >= frames.length ){
      shuffle(frames);
      frm = 0;
    }

    /*
    //  CHANGE: No longer random interval
    clearInterval(timer);

    timer = setInterval(function(){ setRandomInterval(); }, ( (Math.random() * 2000) + (fade_length * 2) ) );
    */
  }

  function updateFrameCount(){
    var $grid = $( '[data-zww_grid]' );
    var $att = $grid.data('zww_grid').toUpperCase().split('X');
    var $c_cols = $grid.data('zww_col');
    var $c_rows = $grid.data('zww_row');
    var $x_max = $att[0];
    var $y_max = $att[1];
    var $cols = Math.ceil( $(window).width() / $x_max );
    var $rows = Math.ceil( $(window).height() / $y_max );
    var $trigger_mobile = testMobile();


    //  we're done if we don't need to update the number of frames
    if( ($c_cols == $cols) && ($c_rows == $rows) && (is_mobile == $trigger_mobile) ) return;

    //  Still here?  Then let's do this.
    $grid.data('zww_col', $cols);
    $grid.data('zww_row', $rows);
    is_mobile = $trigger_mobile;
    //console.log( "zww_grid: " + $x_max + " x " + $y_max );
    //console.log( "set to: " + $cols + " x " + $rows );
    //console.log( "window: " + $(window).width() + " x " + $(window).h
    //console.log( "trigger_mobile: " + $trigger_mobile + " is_mobile: " + is_mobile );eight() );
    //console.log( "cols: " + $cols + ", $rows: " + $rows );
    $grid.text("");
    $('.top-grid').text("");
    $('.bottom-grid').text("");

    if($trigger_mobile){

      $rows = 2;
      grid_style.text('/*auto-generated by js*/.zww_grid_frame {width: calc(100%/'+ $cols +');}');

      $grid.text("");
      for(var $y = 0; $y<$rows; $y++){
        $row_content = $( '<div class="zww_grid_row"></div>' );
        for(var $x = 0; $x<$cols; $x++){
          $row_content.append('<div class="zww_grid_frame edge"><div class="bottom_layer"></div><div class="top_layer"></div></div>');
        }
        if($y == 0) $('.top-grid').append($row_content);
        else $('.bottom-grid').append($row_content);
      }

    } else {

      grid_style.text('/*auto-generated by js*/.zww_grid_row {height: calc(100%/'+ $rows +');}.zww_grid_frame {width: calc(100%/'+ $cols +');}');

      $grid.text("");
      for(var $y = 0; $y<$rows; $y++){
        $row_content = $( '<div class="zww_grid_row"></div>' );
        for(var $x = 0; $x<$cols; $x++){
          if( ( $x == 0 ) || ( $y == 0 ) || ( $x == ( $cols-1 ) ) || ( $y == ( $rows-1 ) ) ){
            //  Only focus on the edges
            $row_content.append('<div class="zww_grid_frame edge"><div class="bottom_layer"></div><div class="top_layer"></div></div>');
          } else {
            $row_content.append('<div class="zww_grid_frame"></div>');
          }
        }
        $grid.append($row_content);
      }

    }

    frames = [];
    // Set up background images and frame array
    $.each( $(".zww_grid_frame"), function( index, value ) {

      $this = $(value);
      if($this.hasClass('edge')){
        var $top = $( $this.find('.top_layer')[0] );
        setImage($top);

        frames.push( {
          "rnd": 0,
          "frame":$top
        } );

      } else {
        setImage($this);
      }

    });
    shuffle(frames);
    frm = 0;

  }

  /********************************  Start this party!  *******************************/
  init();
  w2w.init(); // Call org display logic

});
